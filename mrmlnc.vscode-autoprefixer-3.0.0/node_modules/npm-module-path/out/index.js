'use strict';
const finder_1 = require("./lib/finder");
const resolver_1 = require("./lib/resolver");
function resolveOne(toResolve, root, options) {
    options = Object.assign({
        cache: '',
        resolveDir: false,
        resolveOnlyByPrefix: false
    }, options);
    if (options.cache) {
        return Promise.resolve(options.cache);
    }
    const defaultPaths = finder_1.getDefaultNodePaths(root);
    if (options.resolveOnlyByPrefix) {
        return resolver_1.resolveOneModuleByPrefix(toResolve, options);
    }
    return resolver_1.resolveOneModule(toResolve, defaultPaths, options).then((filepath) => {
        if (filepath === '') {
            return resolver_1.resolveOneModuleByPrefix(toResolve, options);
        }
        return filepath;
    });
}
exports.resolveOne = resolveOne;
function resolveMany(toResolve, root, options) {
    options = Object.assign({
        cache: '',
        resolveDir: false,
        resolveOnlyByPrefix: false
    }, options);
    if (options.cache) {
        options.cache = [].concat(options.cache);
        return Promise.resolve(options.cache);
    }
    const defaultPaths = finder_1.getDefaultNodePaths(root);
    if (options.resolveOnlyByPrefix) {
        return resolver_1.resolveManyModuleByPrefix(toResolve, options, false);
    }
    return resolver_1.resolveManyModules(toResolve, defaultPaths, options, false);
}
exports.resolveMany = resolveMany;
